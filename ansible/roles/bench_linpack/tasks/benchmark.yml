---
# tasks file for bench_linpack.benchmark

# Nested Loops
# Ressource Limit     - use bench_linpack__resource_limits and set bench_loop_target_reccource_limit
# Runtime             - use bench_linpack__runtimes and set bench_loop_target_runtime
# Container           - use bench_linpack__target_images and set bench_loop_target_image_name
# Number of instances - no varables set or used   
# repeat              - repeats the bechmark as long as bench_linpack__repeat and set bench_loop_repeat_number
# benchmark           - do the real benchmark <- this file

- name: show loop vars
  debug: 
    msg: 
      - "bench_loop_target_reccource_limit -> {{ bench_loop_target_reccource_limit }} bench_loop_target_runtime -> {{ bench_loop_target_runtime }}"
      - "repeat run -> {{ bench_loop_repeat_number }}"

- name: set benchmark output folder var
  set_fact: bench_loop_result_path="{{ bench_linpack__result_path }}/{{ bench_loop_target_reccource_limit }}/{{bench_loop_target_runtime}}/linpack/repeat_{{ bench_loop_repeat_number }}"

- name: show benchmark output folder var
  debug: 
    msg: "bench_loop_result_path -> {{ bench_loop_result_path }}"
    verbosity: 1

- name: Remove Docker Cache target
  include_role:
    name: docker_prune
  vars:
    docker_prune__remove_docker: false
    docker_prune__supress_confirmation: true
    docker_prune__clean_cache: false
  when: bench_linpack__clean_docker_cache

- name: set nabla flag
  block:
  - name: set nabla_runtime_flag if runntime is not nabla
    set_fact: nabla_runtime_flag=false container_flag='legacy'
    when: bench_loop_target_runtime != 'runnc'

  - name: Load Container Image from Cache 
    include_tasks: load_target_images.yml
    vars:
      archive_image_key: "linpack"

  - name: Creates benchmark result folder
    file:
      path: "{{ bench_loop_result_path }}"
      owner: "{{ ansible_env.SUDO_USER  }}"
      group: "{{ ansible_env.SUDO_USER  }}"
      mode: '0777'
      state: directory

  - name: Create target containers min limits
    shell:
      cmd: "docker run -d --runtime={{ bench_loop_target_runtime }} --cpus=1 --memory=2G --name=bench-linpack bench-linpack-{{ container_flag }}:1"
    args:
      executable: /bin/bash
    become: true
    when: bench_loop_target_reccource_limit == 'min'

  - name: Create target containers default limits
    shell:
      cmd: "docker run -d --runtime={{ bench_loop_target_runtime }} --name=bench-linpack bench-linpack-{{ container_flag }}:1"
    args:
      executable: /bin/bash
    become: true
    when: bench_loop_target_reccource_limit == 'default'

  - name: Create target containers max limits
    shell:
      cmd: "docker run -d --runtime={{ bench_loop_target_runtime }} --cpus={{ target_cpu_count }} --memory={{ target_ram_count }} --name=bench-linpack bench-linpack-{{ container_flag }}:1"
    args:
      executable: /bin/bash
    become: true
    when: bench_loop_target_reccource_limit == 'max' and bench_loop_target_runtime != 'kata'

  - name: Create target containers max limits for kata
    shell:
      cmd: "docker run -d --runtime={{ bench_loop_target_runtime }} --cpus={{ target_cpu_count }} --memory={{ target__kata_ram_count }} --name=bench-linpack bench-linpack-{{ container_flag }}:1"
    args:
      executable: /bin/bash
    become: true
    when: bench_loop_target_reccource_limit == 'max' and bench_loop_target_runtime == 'kata'

  - pause:
      prompt: "Wait some time to finish the benchmark run. Please don't stop."
      seconds: 400

  - name: collect logs of the benchmark containers
    shell:
      cmd: "docker logs bench-linpack >& linpack.txt"
      chdir: "{{ bench_loop_result_path }}"
    args:
      executable: /bin/bash
    become: true
